import { Script } from '@script_types/script/script';
import { DataSourcesTypes as DS } from '@script_types/sources/sources_types';
import { SourceVehicleStatus } from '@script_types/sources/vehicle/source_vehicle_status';
import { ScriptConfig } from '../gen/spec_config'; /* File will be automatically generated by compiler! Run "nom run cli install" */
import { specification } from './spec';

type ProvidedSources = "vehicle_status";

export class MyScript implements Script.Class<ScriptConfig, ProvidedSources> {
    private i3_image_uuid = "i3_image_" + Date.now();

    start = async (ctx: Script.Context, config: ScriptConfig): Promise<void> => {
        console.info("Ident:" + specification.id_ident);
        console.info("Config:" + JSON.stringify(config));

        ctx.data.mqtt.subscribe("mytopic/#", this.demoReceiveMqttMsg);
        console.log("Start done!");

        ctx.data.assets.init({
            expiry_ms: Number.MAX_SAFE_INTEGER,
            max_entry_count: 1
        });

        // ctx.script.registerConfigOptionsProvider()
    }

    stop = async (_reason: Script.StopReason): Promise<void> => {
        console.info("Stopping all my stuff ...");
    }

    public dataRequest = async (type: ProvidedSources, req_params: object): Promise<DS.MapData<typeof type> | undefined> => {
        if (type == "vehicle_status") { 
            return this.dataRequest_VehicleStatus(req_params);
        }
    };

    public dataRequest_VehicleStatus = async (_req_params: object): Promise<SourceVehicleStatus.Data> => {
        
        return {
            // Todo: insert the correct response
            vehicles: [{
                name: "i3",
                id: "VX12345",
                status: {
                    image: {
                        asset_uid: this.i3_image_uuid
                    }
                }
            }]
        };
    }


    public executeCommand = async (type: ProvidedSources, _env: Script.ExecuteEnv, _cmd: DS.MapCmdReq<typeof type>): Promise<DS.MapCmdRes<typeof type> |Â undefined> => {
        return {}
    }

    demoReceiveMqttMsg = (topic: string, _data: string) => {
        console.log("demoReceiveMqttMsg:", topic);
    }
}

export const script = new MyScript();